{"version":3,"file":"static/js/122.ab2cbc55.chunk.js","mappings":"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","sources":["components/AddContactForm/AddContactForm.styled.jsx","components/AddContactForm/AddContactForm.jsx","components/Input/Input.styled.jsx","components/Input/Input.jsx","hooks/useContacts.jsx","hooks/useFilteredContacts.jsx","components/Section/Section.styled.jsx","components/Section/Section.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactListItem/ContactListItem.styled.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","views/ContactsView/ContactsView.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const FormContainer = styled.form`\n  display: block;\n  margin: 0 auto;\n  width: fit-content;\n`;\n","import { useState } from 'react';\nimport { useCreateContactMutation } from 'redux/contacts';\nimport { Circles } from 'react-loader-spinner';\nimport { nanoid } from 'nanoid';\nimport { Input } from 'components/Input';\nimport { FormContainer } from './AddContactForm.styled';\nimport { Button } from 'utilities';\nimport { useContacts } from 'hooks';\n\nexport const AddContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const [createContact, { isLoading: isAdding }] = useCreateContactMutation();\n  const data = useContacts();\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        console.log('No such a field');\n    }\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (isContactExist(name)) {\n      createContact({ name, number });\n      reset();\n    }\n  };\n\n  const isContactExist = name => {\n    if (\n      data.find(contact => contact.name.toLowerCase() === name.toLowerCase())\n    ) {\n      alert(`${name} is already in contacts`);\n      return false;\n    }\n    return true;\n  };\n\n  return (\n    <FormContainer autoComplete=\"off\" onSubmit={handleSubmit}>\n      <Input\n        name=\"name\"\n        type=\"text\"\n        id={nanoid()}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        value={name}\n        required={true}\n        placeholder=\"Name Surname\"\n        onChange={handleChange}\n      />\n      <Input\n        type=\"tel\"\n        name=\"number\"\n        id={nanoid()}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        value={number}\n        required={true}\n        placeholder=\"+380 (111) 11 11 11\"\n        onChange={handleChange}\n      />\n      <Button type=\"submit\">\n        {isAdding ? (\n          <Circles color=\"#8d8d8d\" width=\"16\" height=\"16\" />\n        ) : (\n          'Add contact'\n        )}\n      </Button>\n    </FormContainer>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Label = styled.label`\n  display: block;\n  margin-bottom: 5px;\n  font-size: 20px;\n  font-weight: 500;\n  text-transform: capitalize;\n`;\n\nexport const InputField = styled.input`\n  display: block;\n  margin-bottom: 20px;\n\n  border-radius: ${({ theme }) => theme.borderRadius};\n  border: 1px solid ${({ theme }) => theme.colors.borderMiddleColor};\n  transition: box-shadow 250ms ease-out;\n\n  &:focus-within {\n    outline: none;\n    box-shadow: 0 0 7px ${({ theme }) => theme.colors.accentColor};\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { nanoid } from 'nanoid';\nimport { InputField, Label } from './Input.styled';\n\nexport function Input({\n  name,\n  type,\n  value,\n  pattern,\n  title,\n  required,\n  placeholder,\n  onChange,\n}) {\n  const id = nanoid();\n  return (\n    <>\n      <Label htmlFor={id}>{name}</Label>\n      <InputField\n        type={type}\n        name={name}\n        id={id}\n        value={value}\n        pattern={pattern}\n        title={title}\n        required={required}\n        placeholder={placeholder}\n        onChange={onChange}\n      />\n    </>\n  );\n}\n\nInput.propTypes = {\n  name: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  pattern: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  required: PropTypes.bool.isRequired,\n  placeholder: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n};\n","import { useGetContactsQuery } from 'redux/contacts';\nimport { useSelector } from 'react-redux';\nimport { getUserToken } from 'redux/userState';\n\nconst useContacts = () => {\n  const isLogged = useSelector(getUserToken);\n  const { data = [] } = useGetContactsQuery(undefined, { skip: !isLogged });\n\n  return data;\n};\n\nexport { useContacts };\n","import { getFilterValue } from 'redux/contacts';\nimport { useContacts } from './useContacts';\nimport { useSelector } from 'react-redux';\n\nconst useFilteredContacts = () => {\n  const data = useContacts();\n  const filterValue = useSelector(getFilterValue).toLowerCase();\n\n  return filterValue\n    ? data.filter(item =>\n        item.name\n          .toLowerCase()\n          .split(' ')\n          .some(element => element.includes(filterValue))\n      )\n    : data;\n};\n\nexport default useFilteredContacts;\n","import styled from '@emotion/styled';\n\nexport const SectionCommon = styled.section`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  min-width: 300px;\n  width: 60%;\n  padding-top: 25px;\n  padding-bottom: 25px;\n  background-color: ${({ theme }) => theme.colors.backgroundLightColor};\n  border-radius: ${({ theme }) => theme.borderRadius};\n  box-shadow: ${({ theme }) => theme.shadow};\n  &:not(:last-child) {\n    margin-bottom: 20px;\n  }\n`;\n\nexport const SectionTitle = styled.h2`\n  margin-top: 0;\n  margin-bottom: 20px;\n  margin-left: auto;\n  margin-right: auto;\n  font-size: 25px;\n  text-align: center;\n  vertical-align: middle;\n`;\n","import PropTypes from 'prop-types';\nimport { SectionCommon, SectionTitle } from './Section.styled';\n\nexport function Section({ title, children }) {\n  return (\n    <SectionCommon>\n      {title && <SectionTitle>{title}</SectionTitle>}\n      {children}\n    </SectionCommon>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n","import styled from '@emotion/styled';\n\nexport const FilterContainer = styled.div`\n  margin: 0 auto;\n  width: fit-content;\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { setFilter, getFilterValue } from 'redux/contacts';\nimport { Input } from 'components/Input';\nimport { FilterContainer } from './Filter.styled';\n\nexport function Filter() {\n  const filterValue = useSelector(getFilterValue);\n  const dispatch = useDispatch();\n  const handleChange = event => {\n    const { value } = event.target;\n    dispatch(setFilter(value));\n  };\n  return (\n    <FilterContainer>\n      <Input\n        name=\"filter\"\n        type=\"search\"\n        value={filterValue}\n        title=\"Enter a name or a family name of the contact to filter data. Filter is case insensitive.\"\n        onChange={handleChange}\n        required={false}\n        pattern=\"\"\n      />\n    </FilterContainer>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const ListItem = styled.li`\n  font-size: 20px;\n  font-weight: 500;\n  text-transform: capitalize;\n`;\n","import PropTypes from 'prop-types';\nimport { Circles } from 'react-loader-spinner';\nimport { useDeleteContactMutation } from 'redux/contacts';\nimport { ListItem } from './ContactListItem.styled';\nimport { Button } from 'utilities';\nimport { useContacts } from 'hooks';\n\nexport function ContactListItem({ id }) {\n  const data = useContacts();\n  const [deleteContact, { isLoading: isDeleting }] = useDeleteContactMutation();\n  const { name, number } = data.find(item => item.id === id);\n  const handleClick = () => {\n    deleteContact(id);\n  };\n  return (\n    <ListItem>\n      {data && (\n        <>\n          {name}: {number}{' '}\n          <Button type=\"button\" onClick={handleClick} disabled={isDeleting}>\n            {isDeleting ? (\n              <Circles color=\"#8d8d8d\" width=\"16\" height=\"16\" />\n            ) : (\n              'Delete'\n            )}\n          </Button>\n        </>\n      )}\n    </ListItem>\n  );\n}\n\nContactListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  margin: 0 auto;\n  width: fit-content;\n`;\n","import useFilteredContacts from 'hooks/useFilteredContacts';\nimport { ContactListItem } from 'components/ContactListItem';\nimport { List } from './ContactList.styled';\n\nexport function ContactList() {\n  const filteredContacts = useFilteredContacts();\n\n  return (\n    <>\n      {filteredContacts && (\n        <List>\n          {filteredContacts.map(({ id }) => {\n            return <ContactListItem key={id} id={id}></ContactListItem>;\n          })}\n        </List>\n      )}\n    </>\n  );\n}\n","import { Section } from 'components/Section';\nimport { AddContactForm } from 'components/AddContactForm';\nimport { Filter } from 'components/Filter';\nimport { ContactList } from 'components/ContactList';\nimport { Main } from 'utilities';\n\nconst ContactsView = () => {\n  return (\n    <Main>\n      <Section title=\"Phonebook\">\n        <AddContactForm />\n      </Section>\n\n      <Section title=\"Contacts\">\n        <Filter />\n        <ContactList />\n      </Section>\n    </Main>\n  );\n};\n\nexport default ContactsView;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["FormContainer","styled","AddContactForm","useState","name","setName","number","setNumber","useCreateContactMutation","createContact","isAdding","isLoading","data","useContacts","handleChange","event","target","value","console","log","isContactExist","find","contact","toLowerCase","alert","autoComplete","onSubmit","preventDefault","Input","I","type","id","nanoid","pattern","title","required","placeholder","onChange","Button","color","width","height","Label","InputField","theme","borderRadius","colors","borderMiddleColor","accentColor","htmlFor","isLogged","useSelector","getUserToken","useGetContactsQuery","undefined","skip","filterValue","getFilterValue","filter","item","split","some","element","includes","SectionCommon","backgroundLightColor","shadow","SectionTitle","Section","children","FilterContainer","Filter","dispatch","useDispatch","setFilter","ListItem","ContactListItem","useDeleteContactMutation","deleteContact","isDeleting","onClick","disabled","List","ContactList","filteredContacts","useFilteredContacts","map","Main","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}