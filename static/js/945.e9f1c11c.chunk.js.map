{"version":3,"file":"static/js/945.e9f1c11c.chunk.js","mappings":"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","sources":["components/AddContactForm/AddContactForm.styled.jsx","components/AddContactForm/AddContactForm.jsx","components/AuthForm/AuthForm.jsx","components/Input/Input.styled.jsx","components/Input/Input.jsx","hooks/useContacts.jsx","hooks/useFilteredContacts.jsx","views/RegisterView/RegisterView.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const FormContainer = styled.form`\n  display: block;\n  margin: 0 auto;\n  width: fit-content;\n`;\n","import { useState } from 'react';\nimport { useCreateContactMutation } from 'redux/contacts';\nimport { Circles } from 'react-loader-spinner';\nimport { nanoid } from 'nanoid';\nimport { Input } from 'components/Input';\nimport { FormContainer } from './AddContactForm.styled';\nimport { Button } from 'utilities';\nimport { useContacts } from 'hooks';\n\nexport const AddContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const [createContact, { isLoading: isAdding }] = useCreateContactMutation();\n  const data = useContacts();\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        console.log('No such a field');\n    }\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (isContactExist(name)) {\n      createContact({ name, number });\n      reset();\n    }\n  };\n\n  const isContactExist = name => {\n    if (\n      data.find(contact => contact.name.toLowerCase() === name.toLowerCase())\n    ) {\n      alert(`${name} is already in contacts`);\n      return false;\n    }\n    return true;\n  };\n\n  return (\n    <FormContainer autoComplete=\"off\" onSubmit={handleSubmit}>\n      <Input\n        name=\"name\"\n        type=\"text\"\n        id={nanoid()}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        value={name}\n        required={true}\n        placeholder=\"Name Surname\"\n        onChange={handleChange}\n      />\n      <Input\n        type=\"tel\"\n        name=\"number\"\n        id={nanoid()}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        value={number}\n        required={true}\n        placeholder=\"+380 (111) 11 11 11\"\n        onChange={handleChange}\n      />\n      <Button type=\"submit\">\n        {isAdding ? (\n          <Circles color=\"#8d8d8d\" width=\"16\" height=\"16\" />\n        ) : (\n          'Add contact'\n        )}\n      </Button>\n    </FormContainer>\n  );\n};\n","import { nanoid } from 'nanoid';\nimport PropTypes from 'prop-types';\nimport {\n  useSignUpUserMutation,\n  useSignInUserMutation,\n} from 'redux/userState/authSlice';\nimport { Circles } from 'react-loader-spinner';\nimport { Button } from 'utilities';\nimport { useState } from 'react';\nimport { Main } from 'utilities';\nimport { Input } from 'components/Input';\nimport { FormContainer } from 'components/AddContactForm';\n\nconst AuthForm = ({ action }) => {\n  const [userName, setUserName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [\n    signInUser,\n    {\n      isLoading: isSigningIn,\n      isError: isSignInError,\n      isSuccess: isSignInSuccess,\n      data: signInData,\n    },\n  ] = useSignInUserMutation();\n  const [\n    signUpUser,\n    {\n      isLoading: isSigningUp,\n      isError: isSignUpError,\n      isSuccess: isSignUpSuccess,\n      data: signUpData,\n    },\n  ] = useSignUpUserMutation();\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'userName':\n        setUserName(value);\n        break;\n\n      case 'email':\n        setEmail(value);\n        break;\n\n      case 'password':\n        setPassword(value);\n        break;\n\n      default:\n        console.log('No such a field');\n    }\n  };\n\n  const reset = () => {\n    setUserName('');\n    setEmail('');\n    setPassword('');\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    switch (action) {\n      case 'signIn':\n        signInUser({ email, password });\n        break;\n      case 'signUp':\n        signUpUser({ name: userName, email, password });\n        break;\n      default:\n        console.log('No such an action');\n    }\n    reset();\n  };\n\n  return (\n    <Main>\n      <FormContainer autoComplete=\"on\" onSubmit={handleSubmit}>\n        {action === 'signUp' && (\n          <Input\n            name=\"userName\"\n            type=\"text\"\n            id={nanoid()}\n            pattern=\"^[a-zA-Z0-9]+(([-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, numbers and dash.\"\n            value={userName}\n            required={true}\n            placeholder=\"Enter UserName\"\n            onChange={handleChange}\n          />\n        )}\n        <Input\n          type=\"email\"\n          name=\"email\"\n          id={nanoid()}\n          pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$\"\n          title=\"Please, enter your email\"\n          value={email}\n          required={true}\n          placeholder=\"Enter email\"\n          onChange={handleChange}\n        />\n        <Input\n          type=\"password\"\n          name=\"password\"\n          id={nanoid()}\n          pattern=\"[a-z0-9._%+-]{7,12}\"\n          title=\"Password may contain letters in lowercase, numbers and it's lenghth should be from 7 to 12 symbols\"\n          value={password}\n          required={true}\n          placeholder=\"Enter password\"\n          onChange={handleChange}\n        />\n        <Button type=\"submit\">\n          {isSigningIn || isSigningUp ? (\n            <Circles color=\"blue\" width=\"16\" height=\"16\" />\n          ) : action === 'signUp' ? (\n            'Sign Up'\n          ) : (\n            'Sign In'\n          )}\n        </Button>\n      </FormContainer>\n      {isSignInError && <p>Sorry, no such a user found.</p>}\n      {isSignUpError && <p>Sorry, user registration error.</p>}\n      {isSignInSuccess && <p>Welcome, {signInData.user.name}.</p>}\n      {isSignUpSuccess && <p>Welcome, {signUpData.user.name}.</p>}\n    </Main>\n  );\n};\n\nAuthForm.propTypes = {\n  action: PropTypes.string.isRequired,\n};\n\nexport default AuthForm;\n","import styled from '@emotion/styled';\n\nexport const Label = styled.label`\n  display: block;\n  margin-bottom: 5px;\n  font-size: 20px;\n  font-weight: 500;\n  text-transform: capitalize;\n`;\n\nexport const InputField = styled.input`\n  display: block;\n  margin-bottom: 20px;\n\n  border-radius: ${({ theme }) => theme.borderRadius};\n  border: 1px solid ${({ theme }) => theme.colors.borderMiddleColor};\n  transition: box-shadow 250ms ease-out;\n\n  &:focus-within {\n    outline: none;\n    box-shadow: 0 0 7px ${({ theme }) => theme.colors.accentColor};\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { nanoid } from 'nanoid';\nimport { InputField, Label } from './Input.styled';\n\nexport function Input({\n  name,\n  type,\n  value,\n  pattern,\n  title,\n  required,\n  placeholder,\n  onChange,\n}) {\n  const id = nanoid();\n  return (\n    <>\n      <Label htmlFor={id}>{name}</Label>\n      <InputField\n        type={type}\n        name={name}\n        id={id}\n        value={value}\n        pattern={pattern}\n        title={title}\n        required={required}\n        placeholder={placeholder}\n        onChange={onChange}\n      />\n    </>\n  );\n}\n\nInput.propTypes = {\n  name: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  pattern: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  required: PropTypes.bool.isRequired,\n  placeholder: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n};\n","import { useGetContactsQuery } from 'redux/contacts';\nimport { useSelector } from 'react-redux';\nimport { getUserToken } from 'redux/userState';\n\nconst useContacts = () => {\n  const isLogged = useSelector(getUserToken);\n  const { data = [] } = useGetContactsQuery(undefined, {\n    skip: !isLogged,\n    refetchOnMountOrArgChange: true,\n  });\n\n  return data;\n};\n\nexport { useContacts };\n","import { getFilterValue } from 'redux/contacts';\nimport { useContacts } from './useContacts';\nimport { useSelector } from 'react-redux';\n\nconst useFilteredContacts = () => {\n  const data = useContacts();\n  const filterValue = useSelector(getFilterValue).toLowerCase();\n\n  return filterValue\n    ? data.filter(item =>\n        item.name\n          .toLowerCase()\n          .split(' ')\n          .some(element => element.includes(filterValue))\n      )\n    : data;\n};\n\nexport default useFilteredContacts;\n","import { Main } from 'utilities';\nimport AuthForm from 'components/AuthForm';\n\nconst RegisterView = () => {\n  return (\n    <Main>\n      <AuthForm action=\"signUp\" />\n    </Main>\n  );\n};\n\nexport default RegisterView;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["FormContainer","styled","AddContactForm","useState","name","setName","number","setNumber","useCreateContactMutation","createContact","isAdding","isLoading","data","useContacts","handleChange","event","target","value","console","log","isContactExist","find","contact","toLowerCase","alert","autoComplete","onSubmit","preventDefault","Input","I","type","id","nanoid","pattern","title","required","placeholder","onChange","Button","color","width","height","action","userName","setUserName","email","setEmail","password","setPassword","useSignInUserMutation","signInUser","isSigningIn","isSignInError","isError","isSignInSuccess","isSuccess","signInData","useSignUpUserMutation","signUpUser","isSigningUp","isSignUpError","isSignUpSuccess","signUpData","Main","user","Label","InputField","theme","borderRadius","colors","borderMiddleColor","accentColor","htmlFor","isLogged","useSelector","getUserToken","useGetContactsQuery","undefined","skip","refetchOnMountOrArgChange","filterValue","getFilterValue","filter","item","split","some","element","includes","AuthForm","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}