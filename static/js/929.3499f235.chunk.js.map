{"version":3,"file":"static/js/929.3499f235.chunk.js","mappings":"4QAEaA,E,QAAgBC,EAAAA,KAAH,+G,0FCSbC,EAAiB,WAC5B,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA4BJ,EAAAA,EAAAA,UAAS,IAArC,eAAOK,EAAP,KAAeC,EAAf,KACA,GAAsCN,EAAAA,EAAAA,WAAS,GAA/C,eAAOO,EAAP,KAAoBC,EAApB,KACA,GAAiDC,EAAAA,EAAAA,MAAjD,eAAOC,EAAP,KAAmCC,EAAnC,KAAwBC,UAClBC,GAAOC,EAAAA,EAAAA,KACPC,EAAc,IAAIC,OACtB,0HAGIC,EAAgB,IAAID,OACxB,+EAGIE,EAAe,SAAAC,GACnB,MAAwBA,EAAMC,OAAtBnB,EAAR,EAAQA,KAAMoB,EAAd,EAAcA,MAEd,OAAQpB,GACN,IAAK,OACHC,EAAQmB,GACRjB,GAAa,GAEb,MAEF,IAAK,SACHE,EAAUe,GACVb,GAAe,GACf,MAEF,QACEc,QAAQC,IAAI,mBAEjB,EAwBKC,EAAiB,SAAAvB,GACrB,OACEY,EAAKY,MAAK,SAAAC,GAAO,OAAIA,EAAQzB,KAAK0B,gBAAkB1B,EAAK0B,aAAxC,MAEjBC,EAAAA,GAAAA,MAAA,UAAe3B,EAAf,4BACAG,GAAa,IACN,EAGV,EAED,OACE,SAACyB,EAAA,EAAD,CAAMC,QAAM,EAACC,GAAI,CAAEC,GAAI,GAAvB,UACE,UAACC,EAAA,EAAD,YACE,SAACC,EAAA,EAAD,CACEH,GAAI,CACFI,SAAU,GACVC,WAAY,QAEdC,MAAM,UACNC,MAAM,SACNC,cAAY,EAPd,0BAWA,UAAC1C,EAAD,CAAe2C,aAAa,MAAMC,SA1CnB,SAAAtB,GACnBA,EAAMuB,iBACD3B,EAAY4B,KAAK1C,GAIjBgB,EAAc0B,KAAKtC,GAKpBmB,EAAevB,KACjBS,EAAc,CAAET,KAAAA,EAAMI,OAAAA,IAhBxBH,EAAQ,IACRI,EAAU,KAURE,GAAe,GAJfJ,GAAa,EAYhB,EA2BK,WACE,SAACwC,EAAAC,EAAD,CACEC,MAAO3C,EACPF,KAAK,OACL8C,KAAK,OACLC,IAAIC,EAAAA,EAAAA,MACJC,MAAM,yIACN7B,MAAOpB,EACPkD,UAAU,EACVC,YAAY,eACZC,SAAUnC,KAEZ,SAAC0B,EAAAC,EAAD,CACEC,MAAOvC,EACPwC,KAAK,MACL9C,KAAK,SACL+C,IAAIC,EAAAA,EAAAA,MACJK,QAAQ,yFACRJ,MAAM,+FACN7B,MAAOhB,EACP8C,UAAU,EACVC,YAAY,sBACZC,SAAUnC,KAEZ,SAACqC,EAAA,EAAD,CAAQR,KAAK,SAASS,QAAQ,YAA9B,SACG7C,GACC,SAAC,KAAD,CACE0B,MAAOoB,EAAAA,MAAAA,QAAAA,QAAAA,KACPC,MAAM,KACNC,OAAO,OAGT,uBAOb,C,sMCgDD,EArKiB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,GAAgC5D,EAAAA,EAAAA,UAAS,IAAzC,eAAO6D,EAAP,KAAiBC,EAAjB,KACA,GAA0C9D,EAAAA,EAAAA,WAAS,GAAnD,eAAO+D,EAAP,KAAsBC,EAAtB,KACA,GAA0BhE,EAAAA,EAAAA,UAAS,IAAnC,eAAOiE,EAAP,KAAcC,EAAd,KACA,GAAoClE,EAAAA,EAAAA,WAAS,GAA7C,eAAOmE,EAAP,KAAmBC,EAAnB,KACA,GAAgCpE,EAAAA,EAAAA,UAAS,IAAzC,eAAOqE,EAAP,KAAiBC,EAAjB,KACA,GAA0CtE,EAAAA,EAAAA,WAAS,GAAnD,eAAOuE,EAAP,KAAsBC,EAAtB,KACA,GAAiDC,EAAAA,EAAAA,MAAjD,eAAOC,EAAP,KAAgCC,EAAhC,KAAqB/D,UACrB,GAAiDgE,EAAAA,EAAAA,MAAjD,eAAOC,EAAP,KAAgCC,EAAhC,KAAqBlE,UACfG,EAAc,IAAIC,OACtB,iGAEI+D,EAAe,IAAI/D,OAAO,2CAC1BgE,EAAkB,IAAIhE,OAAO,uBAE7BE,EAAe,SAAAC,GACnB,MAAwBA,EAAMC,OAAtBnB,EAAR,EAAQA,KAAMoB,EAAd,EAAcA,MAEd,OAAQpB,GACN,IAAK,WACH6D,EAAYzC,GACZ2C,GAAiB,GACjB,MAEF,IAAK,QACHE,EAAS7C,GACT+C,GAAc,GACd,MAEF,IAAK,WACHE,EAAYjD,GACZmD,GAAiB,GACjB,MAEF,QACElD,QAAQC,IAAI,mBAEjB,EAkDD,OACE,SAAC,EAAA0D,KAAD,WACE,SAACpD,EAAA,EAAD,CAAMC,QAAM,EAACC,GAAI,CAAEC,GAAI,GAAvB,UACE,UAACC,EAAA,EAAD,YACE,SAACC,EAAA,EAAD,CACEH,GAAI,CACFI,SAAU,GACVC,WAAY,OACZ8C,cAAe,cAEjB7C,MAAM,UACNC,MAAM,SACNC,cAAY,EARd,SAUGqB,KAEH,UAAC,IAAD,CAAepB,aAAa,MAAMC,SA1DrB,SAAAtB,GAEnB,GADAA,EAAMuB,iBACFmB,IAAa9C,EAAY4B,KAAKkB,GAGhC,OAFAG,GAAiB,QACjB1C,QAAQC,IAAI,OAAQwC,GAGtB,IAAKgB,EAAapC,KAAKsB,GAGrB,OAFAG,GAAc,QACd9C,QAAQC,IAAI,QAAS4C,GAGvB,IAAKa,EAAgBrC,KAAK0B,GAGxB,OAFAG,GAAiB,QACjBlD,QAAQC,IAAI,OAAQgD,GAItB,OAAQX,GACN,IAAK,SACHc,EAAW,CAAET,MAAAA,EAAOI,SAAAA,IAAYc,MAAK,SAAAC,GAAa,IAAD,EACf,OAApB,OAARA,QAAQ,IAARA,GAAA,UAAAA,EAAUtC,aAAV,eAAiBuC,SACnBzD,EAAAA,GAAAA,MAAY,sBAEf,IACD,MACF,IAAK,SACHiD,EAAW,CAAE5E,KAAM4D,EAAUI,MAAAA,EAAOI,SAAAA,IAAYc,MAAK,SAAAC,GAAa,IAAD,IAC/B,OAApB,OAARA,QAAQ,IAARA,GAAA,UAAAA,EAAUtC,aAAV,eAAiBuC,SACnBzD,EAAAA,GAAAA,MAAY,4BAEkB,OAApB,OAARwD,QAAQ,IAARA,GAAA,UAAAA,EAAUtC,aAAV,eAAiBuC,SACnBzD,EAAAA,GAAAA,MAAY,gBAEf,IACD,MACF,QACEN,QAAQC,IAAI,kBA1ChBuC,EAAY,IACZI,EAAS,IACTI,EAAY,GA2Cb,EAkBO,UACc,WAAXV,IACC,SAAChB,EAAAC,EAAD,CACEC,MAAOiB,EACP9D,KAAK,WACL8C,KAAK,OACLC,IAAIC,EAAAA,EAAAA,MACJC,MAAM,mDACN7B,MAAOwC,EACPV,UAAU,EACVC,YAAY,iBACZC,SAAUnC,KAGd,SAAC0B,EAAAC,EAAD,CACEC,MAAOqB,EACPpB,KAAK,QACL9C,KAAK,QACL+C,IAAIC,EAAAA,EAAAA,MACJC,MAAM,2BACN7B,MAAO4C,EACPd,UAAU,EACVC,YAAY,cACZC,SAAUnC,KAEZ,SAAC0B,EAAAC,EAAD,CACEC,MAAOyB,EACPxB,KAAK,WACL9C,KAAK,WACL+C,IAAIC,EAAAA,EAAAA,MACJC,MAAM,qGACN7B,MAAOgD,EACPlB,UAAU,EACVC,YAAY,iBACZC,SAAUnC,EACVoE,UAAU,IACVC,UAAU,QAEZ,SAAChC,EAAA,EAAD,CAAQR,KAAK,SAASS,QAAQ,YAA9B,SACGmB,GAAeG,GACd,SAAC,KAAD,CACEzC,MAAOoB,EAAAA,MAAAA,QAAAA,QAAAA,KACPC,MAAM,KACNC,OAAO,OAEI,WAAXC,EACF,UAEA,qBAQf,C,yFC1KM,SAAShB,EAAT,GAWH,IAVF3C,EAUC,EAVDA,KACA8C,EASC,EATDA,KACA1B,EAQC,EARDA,MACA6B,EAOC,EAPDA,MACAC,EAMC,EANDA,SACAC,EAKC,EALDA,YACAC,EAIC,EAJDA,SACAP,EAGC,EAHDA,MACA0C,EAEC,EAFDA,UACAD,EACC,EADDA,UAEMvC,GAAKC,EAAAA,EAAAA,MACX,OACE,SAACwC,EAAA,EAAD,CACEzC,GAAIA,EACJF,MAAOA,EACP4C,MAAO5C,EAAQ,QAAU7C,EACzBoB,MAAOA,EACPgC,SAAUA,EACVN,KAAMA,EACN9C,KAAMA,EACNiD,MAAOA,EACPC,SAAUA,EACVC,YAAaA,EACboC,UAAWA,EACXD,UAAWA,EACXlD,MAAM,UACNN,GAAI,CACF4D,GAAI,IAIX,C,uFCjCK7E,EAAc,WAClB,IAAM8E,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IAC7B,GAAsBC,EAAAA,EAAAA,SAAoBC,EAAW,CACnDC,MAAOL,EACPM,2BAA2B,IAFrBrF,KAKR,YALA,MAAe,GAAf,CAMD,C,uDCMD,IAd4B,WAC1B,IAAMA,GAAOC,EAAAA,EAAAA,KACPqF,GAAcN,EAAAA,EAAAA,IAAYO,EAAAA,IAAgBzE,cAEhD,OAAOwE,EACHtF,EAAKwF,QAAO,SAAAC,GAAI,OACdA,EAAKrG,KACF0B,cACA4E,MAAM,KACNC,MAAK,SAAAC,GAAO,OAAIA,EAAQC,SAASP,EAArB,GAJD,IAMhBtF,CACL,C,kSCLD,EARkB,WAChB,OACE,SAAC,EAAAoE,KAAD,WACE,SAAC0B,EAAA,EAAD,CAAU/C,OAAO,YAGtB,C","sources":["components/AddContactForm/AddContactForm.styled.jsx","components/AddContactForm/AddContactForm.jsx","components/AuthForm/AuthForm.jsx","components/Input/Input.jsx","hooks/useContacts.jsx","hooks/useFilteredContacts.jsx","views/LoginViev/loginView.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const FormContainer = styled.form`\n  display: flex;\n  flex-direction: column;\n  margin: 0 auto;\n  width: fit-content;\n`;\n","import { useState } from 'react';\nimport { useCreateContactMutation } from 'redux/contacts';\nimport { Circles } from 'react-loader-spinner';\nimport { nanoid } from 'nanoid';\nimport { Input } from 'components/Input';\nimport { FormContainer } from './AddContactForm.styled';\nimport { useContacts } from 'hooks';\nimport { toast } from 'react-toastify';\nimport { Card, CardContent, Typography, Button } from '@mui/material';\nimport { theme } from 'utilities';\n\nexport const AddContactForm = () => {\n  const [name, setName] = useState('');\n  const [nameError, setNameError] = useState(false);\n  const [number, setNumber] = useState('');\n  const [numberError, setNumberError] = useState(false);\n  const [createContact, { isLoading: isAdding }] = useCreateContactMutation();\n  const data = useContacts();\n  const namePattern = new RegExp(\n    /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/\n  );\n\n  const numberPattern = new RegExp(\n    /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/\n  );\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        setNameError(false);\n\n        break;\n\n      case 'number':\n        setNumber(value);\n        setNumberError(false);\n        break;\n\n      default:\n        console.log('No such a field');\n    }\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (!namePattern.test(name)) {\n      setNameError(true);\n      return;\n    }\n    if (!numberPattern.test(number)) {\n      setNumberError(true);\n      return;\n    }\n\n    if (isContactExist(name)) {\n      createContact({ name, number });\n      reset();\n    }\n  };\n\n  const isContactExist = name => {\n    if (\n      data.find(contact => contact.name.toLowerCase() === name.toLowerCase())\n    ) {\n      toast.error(`${name} is already in contacts`);\n      setNameError(true);\n      return false;\n    }\n    return true;\n  };\n\n  return (\n    <Card raised sx={{ mt: 2 }}>\n      <CardContent>\n        <Typography\n          sx={{\n            fontSize: 24,\n            fontWeight: 'bold',\n          }}\n          color=\"primary\"\n          align=\"center\"\n          gutterBottom\n        >\n          Add Contact\n        </Typography>\n        <FormContainer autoComplete=\"off\" onSubmit={handleSubmit}>\n          <Input\n            error={nameError}\n            name=\"name\"\n            type=\"text\"\n            id={nanoid()}\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            value={name}\n            required={true}\n            placeholder=\"Name Surname\"\n            onChange={handleChange}\n          />\n          <Input\n            error={numberError}\n            type=\"tel\"\n            name=\"number\"\n            id={nanoid()}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            value={number}\n            required={true}\n            placeholder=\"+380 (111) 11 11 11\"\n            onChange={handleChange}\n          />\n          <Button type=\"submit\" variant=\"contained\">\n            {isAdding ? (\n              <Circles\n                color={theme.palette.triadic.main}\n                width=\"16\"\n                height=\"16\"\n              />\n            ) : (\n              'Add contact'\n            )}\n          </Button>\n        </FormContainer>\n      </CardContent>\n    </Card>\n  );\n};\n","import { nanoid } from 'nanoid';\nimport PropTypes from 'prop-types';\nimport {\n  useSignUpUserMutation,\n  useSignInUserMutation,\n} from 'redux/userState/authSlice';\nimport { Circles } from 'react-loader-spinner';\nimport { useState } from 'react';\nimport { Main, theme } from 'utilities';\nimport { Input } from 'components/Input';\nimport { FormContainer } from 'components/AddContactForm';\nimport { toast } from 'react-toastify';\n\nimport { Card, CardContent, Typography, Button } from '@mui/material';\n\nconst AuthForm = ({ action }) => {\n  const [userName, setUserName] = useState('');\n  const [userNameError, setUserNameError] = useState(false);\n  const [email, setEmail] = useState('');\n  const [emailError, setEmailError] = useState(false);\n  const [password, setPassword] = useState('');\n  const [passwordError, setPasswordError] = useState(false);\n  const [signInUser, { isLoading: isSigningIn }] = useSignInUserMutation();\n  const [signUpUser, { isLoading: isSigningUp }] = useSignUpUserMutation();\n  const namePattern = new RegExp(\n    /^[a-zA-Z0-9]+(([-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/\n  );\n  const emailPattern = new RegExp(/[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$/);\n  const passwordPattern = new RegExp(/[a-z0-9._%+-]{7,12}/);\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'userName':\n        setUserName(value);\n        setUserNameError(false);\n        break;\n\n      case 'email':\n        setEmail(value);\n        setEmailError(false);\n        break;\n\n      case 'password':\n        setPassword(value);\n        setPasswordError(false);\n        break;\n\n      default:\n        console.log('No such a field');\n    }\n  };\n\n  const reset = () => {\n    setUserName('');\n    setEmail('');\n    setPassword('');\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (userName && !namePattern.test(userName)) {\n      setUserNameError(true);\n      console.log('name', userNameError);\n      return;\n    }\n    if (!emailPattern.test(email)) {\n      setEmailError(true);\n      console.log('email', emailError);\n      return;\n    }\n    if (!passwordPattern.test(password)) {\n      setPasswordError(true);\n      console.log('pass', passwordError);\n      return;\n    }\n\n    switch (action) {\n      case 'signIn':\n        signInUser({ email, password }).then(response => {\n          if (response?.error?.status === 400) {\n            toast.error('No such user found!');\n          }\n        });\n        break;\n      case 'signUp':\n        signUpUser({ name: userName, email, password }).then(response => {\n          if (response?.error?.status === 400) {\n            toast.error('User registration error!');\n          }\n          if (response?.error?.status === 500) {\n            toast.error('Server error!');\n          }\n        });\n        break;\n      default:\n        console.log('No such action');\n    }\n    reset();\n  };\n\n  return (\n    <Main>\n      <Card raised sx={{ mt: 2 }}>\n        <CardContent>\n          <Typography\n            sx={{\n              fontSize: 24,\n              fontWeight: 'bold',\n              textTransform: 'capitalize',\n            }}\n            color=\"primary\"\n            align=\"center\"\n            gutterBottom\n          >\n            {action}\n          </Typography>\n          <FormContainer autoComplete=\"off\" onSubmit={handleSubmit}>\n            {action === 'signUp' && (\n              <Input\n                error={userNameError}\n                name=\"userName\"\n                type=\"text\"\n                id={nanoid()}\n                title=\"Name may contain only letters, numbers and dash.\"\n                value={userName}\n                required={true}\n                placeholder=\"Enter UserName\"\n                onChange={handleChange}\n              />\n            )}\n            <Input\n              error={emailError}\n              type=\"email\"\n              name=\"email\"\n              id={nanoid()}\n              title=\"Please, enter your email\"\n              value={email}\n              required={true}\n              placeholder=\"Enter email\"\n              onChange={handleChange}\n            />\n            <Input\n              error={passwordError}\n              type=\"password\"\n              name=\"password\"\n              id={nanoid()}\n              title=\"Password may contain letters in lowercase, numbers and it's lenghth should be from 7 to 12 symbols\"\n              value={password}\n              required={true}\n              placeholder=\"Enter password\"\n              onChange={handleChange}\n              minlength=\"7\"\n              maxLength=\"12\"\n            />\n            <Button type=\"submit\" variant=\"contained\">\n              {isSigningIn || isSigningUp ? (\n                <Circles\n                  color={theme.palette.triadic.main}\n                  width=\"16\"\n                  height=\"16\"\n                />\n              ) : action === 'signUp' ? (\n                'Sign Up'\n              ) : (\n                'Sign In'\n              )}\n            </Button>\n          </FormContainer>\n        </CardContent>\n      </Card>\n    </Main>\n  );\n};\n\nAuthForm.propTypes = {\n  action: PropTypes.string.isRequired,\n};\n\nexport default AuthForm;\n","import PropTypes from 'prop-types';\nimport { nanoid } from 'nanoid';\nimport { TextField } from '@mui/material';\n\nexport function Input({\n  name,\n  type,\n  value,\n  title,\n  required,\n  placeholder,\n  onChange,\n  error,\n  minLength,\n  maxLength,\n}) {\n  const id = nanoid();\n  return (\n    <TextField\n      id={id}\n      error={error}\n      label={error ? 'error' : name}\n      value={value}\n      onChange={onChange}\n      type={type}\n      name={name}\n      title={title}\n      required={required}\n      placeholder={placeholder}\n      minLength={minLength}\n      maxLength={maxLength}\n      color=\"primary\"\n      sx={{\n        mb: 2,\n      }}\n    />\n  );\n}\n\nInput.propTypes = {\n  error: PropTypes.bool,\n  name: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  required: PropTypes.bool.isRequired,\n  placeholder: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  minLength: PropTypes.number,\n  maxLength: PropTypes.number,\n};\n","import { useGetContactsQuery } from 'redux/contacts';\nimport { useSelector } from 'react-redux';\nimport { getUserToken } from 'redux/userState';\n\nconst useContacts = () => {\n  const isLogged = useSelector(getUserToken);\n  const { data = [] } = useGetContactsQuery(undefined, {\n    skip: !isLogged,\n    refetchOnMountOrArgChange: true,\n  });\n\n  return data;\n};\n\nexport { useContacts };\n","import { getFilterValue } from 'redux/contacts';\nimport { useContacts } from './useContacts';\nimport { useSelector } from 'react-redux';\n\nconst useFilteredContacts = () => {\n  const data = useContacts();\n  const filterValue = useSelector(getFilterValue).toLowerCase();\n\n  return filterValue\n    ? data.filter(item =>\n        item.name\n          .toLowerCase()\n          .split(' ')\n          .some(element => element.includes(filterValue))\n      )\n    : data;\n};\n\nexport default useFilteredContacts;\n","import { Main } from 'utilities';\nimport AuthForm from 'components/AuthForm';\n\nconst LoginView = () => {\n  return (\n    <Main>\n      <AuthForm action=\"signIn\" />\n    </Main>\n  );\n};\n\nexport default LoginView;\n"],"names":["FormContainer","styled","AddContactForm","useState","name","setName","nameError","setNameError","number","setNumber","numberError","setNumberError","useCreateContactMutation","createContact","isAdding","isLoading","data","useContacts","namePattern","RegExp","numberPattern","handleChange","event","target","value","console","log","isContactExist","find","contact","toLowerCase","toast","Card","raised","sx","mt","CardContent","Typography","fontSize","fontWeight","color","align","gutterBottom","autoComplete","onSubmit","preventDefault","test","Input","I","error","type","id","nanoid","title","required","placeholder","onChange","pattern","Button","variant","theme","width","height","action","userName","setUserName","userNameError","setUserNameError","email","setEmail","emailError","setEmailError","password","setPassword","passwordError","setPasswordError","useSignInUserMutation","signInUser","isSigningIn","useSignUpUserMutation","signUpUser","isSigningUp","emailPattern","passwordPattern","Main","textTransform","then","response","status","minlength","maxLength","minLength","TextField","label","mb","isLogged","useSelector","getUserToken","useGetContactsQuery","undefined","skip","refetchOnMountOrArgChange","filterValue","getFilterValue","filter","item","split","some","element","includes","AuthForm"],"sourceRoot":""}